#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp ESC        &kp N1     &kp N2        &kp N3        &kp N4  &kp N5       &kp UP_ARROW     &kp N6     &kp N7     &kp N8     &kp N9           &kp N0      &kp BACKSPACE
&kp TAB        &kp Q      &kp W         &kp L         &kp D   &kp G        &kp DOWN_ARROW   &kp J      &kp F      &kp O      &kp U            &kp SEMI    &kp BSLH
&kp BACKSPACE  &kp N      &kp S         &kp R         &kp T   &kp P        &kp LEFT_ARROW   &kp Y      &kp H      &kp E      &kp I            &kp A       &kp SQT
&kp LSHFT      &kp Z      &kp X         &kp C         &kp V   &kp B        &kp RIGHT_ARROW  &kp K      &kp M      &kp COMMA  &kp DOT          &kp FSLH    &kp RSHFT
&kp C_MUTE     &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &mo 1   &kp ENTER    &kp ENTER        &kp ENTER  &kp SPACE  &mo 2      &kp RIGHT_SHIFT  &kp DELETE
            >;

            sensor-bindings = <&scroll_encoder>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp GRAVE   &kp F1        &kp F2      &kp F3      &kp F4        &kp F5           &mmv MOVE_UP     &kp F6         &kp F7        &kp F8        &kp F9         &kp F10       &kp F11
&trans      &kp N1        &kp N2      &kp N3      &kp N4        &kp N5           &mmv MOVE_DOWN   &kp N6         &kp N7        &kp N8        &kp N9         &kp N0        &kp F12
&trans      &kp LS(EXCL)  &kp LS(AT)  &kp LS(N3)  &kp LS(DLLR)  &kp LS(PRCNT)    &mmv MOVE_LEFT   &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(LPAR)   &kp LS(RPAR)  &kp BSLH
&trans      &kp LS(PLUS)  &kp MINUS   &kp EQUAL   &kp LS(LBRC)  &kp LS(RBRC)     &mmv MOVE_RIGHT  &kp LBKT       &kp RBKT      &kp SEMI      &kp LS(COLON)  &kp BSLH      &kp LS(UNDER)
&kp C_MUTE  &trans        &trans      &trans      &trans        &trans           &mkp LCLK        &trans         &trans        &trans        &trans         &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&trans  &trans      &trans     &trans       &trans    &trans    &mmv MOVE_UP     &trans     &trans        &trans      &trans         &trans        &trans
&trans  &none       &none      &trans       &trans    &trans    &mmv MOVE_DOWN   &kp PG_UP  &kp LA(LEFT)  &kp UP      &kp LA(RIGHT)  &kp LA(BSPC)  &kp DEL
&trans  &kp LSHFT   &kp LCTRL  &kp LALT     &kp LGUI  &trans    &mmv MOVE_LEFT   &kp PG_DN  &kp LEFT      &kp DOWN    &kp RIGHT      &none         &kp BSPC
&trans  &sys_reset  &trans     &bootloader  &trans    &trans    &mmv MOVE_RIGHT  &trans     &kp HOME      &sys_reset  &kp END        &bootloader   &trans
&trans  &trans      &trans     &trans       &trans    &trans    &mkp LCLK        &trans     &trans        &trans      &trans         &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        L1 {
            if-layers = <0>;
            then-layer = <1>;
        };
    };
};
