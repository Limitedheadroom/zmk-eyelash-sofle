#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&gresc { keep-mods = <(MOD_LGUI|MOD_LSFT|MOD_RSFT|MOD_RGUI)>; };

&mt {
    tapping-term-ms = <165>;
    flavor = "balanced";
};

&sk {
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

        tap-ms = <100>;
        label = "mouseScroll";
    };

    gresc_td: gresc_td {
        compatible = "zmk,behavior-tap-dance";
        label = "GRESC_TD";
        #binding-cells = <0>;
        tapping-term-ms = <150>;
        bindings = <&gresc>, <&kp ESC>;
    };

    TD_topRight: TD_topRight {
        compatible = "zmk,behavior-tap-dance";
        label = "TD_TOPRIGHT";
        #binding-cells = <0>;
        bindings = <&TH_forceQuit 0 ESCAPE>, <&TH_screenEject 0 0>;
    };

    TH_forceQuit: TH_forceQuit {
        compatible = "zmk,behavior-hold-tap";
        label = "TH_FORCEQUIT";
        bindings = <&M_force_quit>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <350>;
    };

    TH_screenEject: TH_screenEject {
        compatible = "zmk,behavior-hold-tap";
        label = "TH_SCREENEJECT";
        bindings = <&M_ejectAll>, <&screensaver>;

        #binding-cells = <2>;
        tapping-term-ms = <300>;
    };

    TD_layerOrKey: TD_layerOrKey {
        compatible = "zmk,behavior-hold-tap";
        label = "TD_LAYERORKEY";
        bindings = <&lt>, <&sk>;

        #binding-cells = <2>;
        tapping-term-ms = <100>;
    };

    mt_l: mt_l {
        compatible = "zmk,behavior-hold-tap";
        label = "MT_L";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        require-prior-idle-ms = <180>;
        flavor = "balanced";
        hold-trigger-key-positions = <27 28 29 30 14 15 16 17 40 41 42 43 44 31 18 56>;
        hold-trigger-on-release;
    };

    mt_r: mt_r {
        compatible = "zmk,behavior-hold-tap";
        label = "MT_R";
        bindings = <&kp>, <&kp>;

        #binding-cells = <2>;
        tapping-term-ms = <200>;
        require-prior-idle-ms = <180>;
        flavor = "balanced";
        hold-trigger-key-positions = <20 21 22 23 24 33 34 35 36 37 46 47 48 49 60>;
        hold-trigger-on-release;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <39 51>;
        };

        Undo {
            bindings = <&kp LG(Z)>;
            key-positions = <40 41>;
        };

        Cut {
            bindings = <&kp LG(X)>;
            key-positions = <41 42>;
        };

        Copy {
            bindings = <&kp LG(C)>;
            key-positions = <42 43>;
        };

        Paste {
            bindings = <&kp LG(V)>;
            key-positions = <43 44>;
        };

        CreateNew {
            bindings = <&kp LG(N)>;
            key-positions = <27 28>;
        };

        SelectAll {
            bindings = <&kp LG(A)>;
            key-positions = <39 27>;
        };

        SelectAll_v2 {
            bindings = <&kp LG(A)>;
            key-positions = <51 37>;
        };

        C_force_quit {
            bindings = <&M_force_quit>;
            key-positions = <55 54 0>;
        };
    };

    macros {
        M_force_quit: M_force_quit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_COMMAND &kp LEFT_ALT &kp ESC>,
                <&macro_release>;

            label = "M_FORCE_QUIT";
        };

        M_ejectAll: M_ejectAll {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(SPACE)>,
                <&macro_wait_time 250>,
                <&kp E &kp J &kp E &kp C &kp T &kp A &kp L &kp L>,
                <&macro_wait_time 200>,
                <&kp ENTER>;

            label = "M_EJECTALL";
        };

        screensaver: screensaver {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LG(SPACE)>,
                <&macro_wait_time 250>,
                <&kp S &kp C &kp R &kp E &kp E &kp N &kp S &kp A &kp V &kp E &kp R>,
                <&macro_wait_time 200>,
                <&kp ENTER>;

            label = "SCREENSAVER";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&gresc_td      &kp N1          &kp N2         &kp N3            &kp N4        &kp N5         &kp UP_ARROW           &kp N6                &kp N7        &kp N8             &kp N9         &kp N0               &TD_topRight
&kp TAB        &kp Q           &kp W          &kp L             &kp D         &kp G          &kp DOWN_ARROW         &kp J                 &kp F         &kp O              &kp U          &kp SEMI             &kp BSLH
&kp BACKSPACE  &mt_l LSHIFT N  &mt_l LCTRL S  &mt_l LEFT_ALT R  &mt_l LGUI T  &kp P          &kp LS(TAB)            &kp Y                 &mt_r RGUI H  &mt_r RIGHT_ALT E  &mt_r RCTRL I  &mt_r RIGHT_SHIFT A  &kp SQT
&kp LSHFT      &kp Z           &kp X          &kp C             &kp V         &kp B          &kp TAB                &kp K                 &kp M         &kp COMMA          &kp DOT        &kp FSLH             &kp RSHFT
&mo 2          &kp LCTRL       &kp LEFT_ALT   &kp LEFT_GUI      &lt 2 SPACE   &lt 3 ENTER    &kp LC(LA(LG(SPACE)))  &mt LEFT_SHIFT ENTER  &lt 1 SPACE   &key_repeat        &caps_word     &kp DELETE
            >;

            sensor-bindings = <&scroll_encoder>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp GRAVE   &kp F1        &kp F2      &kp F3      &kp F4        &kp F5           &mmv MOVE_UP     &kp F6         &kp F7        &kp F8        &kp F9         &kp F10       &kp F11
&trans      &kp N1        &kp N2      &kp N3      &kp N4        &kp N5           &mmv MOVE_DOWN   &kp N6         &kp N7        &kp N8        &kp N9         &kp N0        &kp F12
&trans      &kp LS(EXCL)  &kp LS(AT)  &kp LS(N3)  &kp LS(DLLR)  &kp LS(PRCNT)    &mmv MOVE_LEFT   &kp LS(CARET)  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(LPAR)   &kp LS(RPAR)  &kp PIPE
&trans      &kp LS(PLUS)  &kp MINUS   &kp EQUAL   &kp LS(LBRC)  &kp LS(RBRC)     &mmv MOVE_RIGHT  &kp LBKT       &kp RBKT      &kp SEMI      &kp LS(COLON)  &kp BSLH      &kp LS(UNDER)
&kp C_MUTE  &trans        &trans      &trans      &trans        &trans           &mkp LCLK        &lt 4 ENTER    &trans        &trans        &trans         &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        layer_2 {
            bindings = <
&trans         &trans     &trans     &trans     &trans     &trans    &kp UP     &trans     &trans        &trans      &trans         &trans        &trans
&trans         &none      &none      &trans     &trans     &trans    &kp DOWN   &kp PG_UP  &kp LA(LEFT)  &kp UP      &kp LA(RIGHT)  &kp LA(BSPC)  &kp DEL
&kp BACKSPACE  &kp LSHFT  &kp LCTRL  &kp LALT   &kp LGUI   &trans    &kp LEFT   &kp PG_DN  &kp LEFT      &kp DOWN    &kp RIGHT      &none         &kp BSPC
&trans         &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &trans    &kp RIGHT  &trans     &kp HOME      &sys_reset  &kp END        &bootloader   &trans
&trans         &trans     &trans     &trans     &trans     &trans    &kp ENTER  &trans     &trans        &trans      &trans         &trans
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        layer_3 {
            bindings = <
&kp ESC    &kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)    &mmv MOVE_UP     &kp LS(LT)    &kp N7     &kp N8    &kp N9     &kp LS(PRCNT)  &kp BSPC
&kp TAB    &trans        &kp HOME    &kp UP         &kp END       &kp PG_UP        &mmv MOVE_DOWN   &kp LS(GT)    &kp N4     &kp N5    &kp N6     &kp FSLH       &kp DEL
&kp BSPC   &trans        &kp LEFT    &kp DOWN       &kp RIGHT     &kp PG_DN        &mmv MOVE_LEFT   &kp LS(LPAR)  &kp N1     &kp N2    &kp N3     &kp STAR       &trans
&kp LSHFT  &kp LSHFT     &kp LCTRL   &kp LALT       &kp LGUI      &trans           &mmv MOVE_RIGHT  &kp LS(RPAR)  &kp N0     &kp DOT   &kp RET    &kp PLUS       &kp MINUS
&trans     &trans        &trans      &trans         &kp SPACE     &trans           &mkp LCLK        &kp RET       &kp SPACE  &kp PLUS  &kp MINUS  &kp EQUAL
            >;
        };

        layer_4 {
            bindings = <
&kp ESC  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        BTaccess {
            bindings = <
&bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans        &trans        &trans        &trans        &trans          &mmv MOVE_DOWN   &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR_ALL  &trans        &trans        &out OUT_USB  &out OUT_BLE  &trans          &mmv MOVE_LEFT   &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans        &trans        &trans        &trans        &soft_off       &mmv MOVE_RIGHT  &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans        &trans        &trans        &trans        &trans          &mkp LCLK        &trans  &trans  &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        BTaccess {
            if-layers = <2 3>;
            then-layer = <5>;
        };
    };
};
